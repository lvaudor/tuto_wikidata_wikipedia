---
title: "Wikidata"
format: html
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
library(glitter)
library(tidyverse)
```

# Introduction

Aller voir sur le site Wikidata!!

```{r}
query ='SELECT ?person ?deathdate ?link ?personLabel WHERE{
?person wdt:P106 wd:Q901402.
?person wdt:P27 wd:Q142.
OPTIONAL{?person wdt:P570 ?deathdate.}
OPTIONAL{?link schema:about ?person; schema:isPartOf <https://fr.wikipedia.org/>.}
SERVICE wikibase:label{bd:serviceParam wikibase:language "fr"}
}'
WikidataQueryServiceR::query_wikidata(query)
```

## Wikidata: difficultés d'appropriation et de collecte

-   👀 ce qu'on appréhende directement: le web documentaire
-   💭 difficultés liées à la structure des données en graphes
-   🔮 métadonnées intégrées aux données
-   🧠️ transformation en données tabulaires pour analyses
-   ⛏️ difficultés de collecte (SPARQL)

![Du graphe de connaissances au tableau de données](img/donnees_en_graphe.png){width="600px"}

## Package glitter: objectifs

![](img/logo_small.png)

🎯 Promouvoir l'usage (exploration, recueil, analyse) des données du web sémantique pour les chercheur·se·s et étudiant·e·s **usagers de R**, en:

-   facilitant l'**écriture** des requêtes SPARQL
-   facilitant l'**envoi** des requêtes
-   favoriser l'analyse/valorisation ultérieure dans R

En tant que "**Domain Specific Language**" (DSL), glitter correspond à une *syntaxe* et des *fonctions* plus proches du tidyverse et base R que de SPARQL.

# Exemple de requête simple

Dans R, sans glitter:

```{r bef_glitter, eval=FALSE}
query <- 'SELECT ?person ?deathdate ?link ?personLabel WHERE{
?person wdt:P106 wd:Q901402.
?person wdt:P27 wd:Q142.
OPTIONAL{?person wdt:P570 ?deathdate.}
OPTIONAL{?link schema:about ?person;
               schema:isPartOf <https://fr.wikipedia.org/>.}
SERVICE wikibase:label{bd:serviceParam wikibase:language "fr"}
}'

geographes_urlfr <- WikidataQueryServiceR::query_wikidata(query)
geographes_urlfr
```

-   🖊️ Rédaction et envoi de commandes R
-   🎁 Recueil du tableau de résultats en tant qu'objet R
-   🎯 Chaîne de traitement reproductible

Dans R, avec glitter:

(ici je garde toutes les langues car tout à l'heure )

```{r glitter_no_SPARQL}
geographes_url=spq_init() %>% 
  spq_add('?person wdt:P106 wd:Q901402') %>% 
  spq_add("?person wdt:P27 wd:Q142") %>% 
  spq_add("?person wdt:P570 ?deathdate", .required=FALSE) %>% 
  spq_add("?link schema:about ?person", .required=FALSE) %>% 
  spq_label(person,.languages="fr") %>% 
  spq_perform()
#saveRDS(geographes_url,"data/geographes_url.RDS")
#geographes_url=readRDS("data/geographes_url.RDS")
```

```{r show_result_init, echo=FALSE}
geographes_url
```


```{r}
query <- spq_init() %>% 
  spq_add('?person wdt:P106 wd:Q901402') %>% 
  spq_add("?person wdt:P27 wd:Q142") %>% 
  spq_add("?person wdt:P570 ?deathdate", .required=FALSE) %>% 
  spq_add("?link schema:about ?person", .required=FALSE) %>% 
  spq_add("?person wdt:P101 ?field",.required=FALSE) %>% 
  spq_add("?person wdt:P21 ?genre") %>% 
  spq_add("?person wdt:P800 ?notable_work",.required=FALSE) %>% 
  spq_add("?notable_work wdt:P921 ?main_subject",.required=FALSE) %>% 
  spq_label(person, notable_work,field,genre,main_subject,.languages="fr")



steps=sequins::plot_query(query,show_step=TRUE, label=TRUE)
steps[[1]]
steps[[2]]
steps[[3]]
steps[[4]]
steps[[5]]
steps[[6]]
steps[[7]]
steps[[8]]
```


# Dimension de la requête?

## Requête enrichie

- [Elisée Reclus](https://www.wikidata.org/wiki/Q20951)
- [L'Homme et la Terre](http://www.wikidata.org/entity/Q3203693)

```{r}
tib <- spq_init() %>% 
  spq_add('?person wdt:P106 wd:Q901402') %>% 
  spq_add("?person wdt:P27 wd:Q142") %>% 
  spq_add("?person wdt:P570 ?deathdate", .required=FALSE) %>% 
  spq_add("?link schema:about ?person", .required=FALSE) %>% 
  spq_add("?person wdt:P101 ?field",.required=FALSE) %>% 
  spq_add("?person wdt:P21 ?genre") %>% 
  spq_add("?person wdt:P800 ?notable_work",.required=FALSE) %>% 
  spq_add("?notable_work wdt:P921 ?main_subject",.required=FALSE) %>% 
  spq_label(person, notable_work,field,genre,main_subject,.languages="fr") %>% 
  spq_summarise(n_lignes=n()) %>%      # Résume en comptant le nombre de lignes puis
  spq_perform()                        # Envoie la requête
```

```{r}
spq_init() %>% 
  spq_add('?person wdt:P106 wd:Q901402') %>% 
  spq_add("?person wdt:P27 wd:Q142") %>% 
  spq_summarise(n_lignes=n()) %>%      # Résume en comptant le nombre de lignes puis
  spq_perform()       
```


```{r}
spq_init() %>% 
  spq_add('?person wdt:P106 wd:Q901402') %>% 
  spq_add("?person wdt:P27 wd:Q142") %>% 
  spq_add("?person wdt:P570 ?deathdate", .required=FALSE) %>% 
  spq_add("?link schema:about ?person", .required=FALSE) %>% 
  spq_summarise(n_lignes=n()) %>%      # Résume en comptant le nombre de lignes puis
  spq_perform()       
```

```{r}
spq_init() %>% 
  spq_add('?person wdt:P106 wd:Q901402') %>% 
  spq_add("?person wdt:P27 wd:Q142") %>% 
  spq_add("?person wdt:P570 ?deathdate", .required=FALSE) %>% 
  spq_add("?link schema:about ?person", .required=FALSE) %>% 
  spq_add("?person wdt:P101 ?field",.required=FALSE) %>% 
  spq_add("?person wdt:P21 ?genre") %>% 
  spq_add("?person wdt:P800 ?notable_work",.required=FALSE) %>% 
  spq_summarise(n_lignes=n()) %>%      # Résume en comptant le nombre de lignes puis
  spq_perform()       
```

```{r}
# Ne fonctionne pas => TimeOut
spq_init() %>% 
  spq_add('?person wdt:P106 wd:Q901402') %>% 
  spq_add("?person wdt:P27 wd:Q142") %>% 
  spq_add("?person wdt:P570 ?deathdate", .required=FALSE) %>% 
  spq_add("?link schema:about ?person", .required=FALSE) %>% 
  spq_add("?person wdt:P101 ?field",.required=FALSE) %>% 
  spq_add("?person wdt:P21 ?genre") %>% 
  spq_add("?person wdt:P800 ?notable_work",.required=FALSE) %>% 
  spq_add("?notable_work wdt:P921 ?main_subject",.required=FALSE) %>% 
  spq_label(person, notable_work,field,genre,main_subject,.languages="fr") %>% 
  spq_summarise(n_lignes=n()) %>%      # Résume en comptant le nombre de lignes puis
  spq_perform()       
```


Temps de réponse du serveur limité par un paramètre de Time out:

-   Wikidata Query Service : 60s
-   client (par ex. glitter): 300s



## Combinaison de requêtes

```{r}
# Prend environ 3-4 minutes
tib_geographes_enrichie=spq_init() %>% 
  spq_add('?person wdt:P106 wd:Q901402') %>% 
  spq_add("?person wdt:P27 wd:Q142") %>% 
  spq_add("?person wdt:P570 ?deathdate", .required=FALSE) %>% 
  spq_add("?link schema:about ?person", .required=FALSE) %>% 
  spq_add("?person wdt:P101 ?field",.required=FALSE) %>% 
  spq_add("?person wdt:P21 ?genre") %>% 
  spq_add("?person wdt:P800 ?notable_work",.required=FALSE) %>% 
  spq_label(person, notable_work,field,genre,.languages="fr") %>% 
  spq_perform()  
#saveRDS(tib_geographes_enrichie,"data/tib_geographes_enrichie.RDS")
```

```{r}
tib_geographes_enrichie=readRDS("data/tib_geographes_enrichie.RDS")
```

```{r combi_queries}
get_main_subject=function(notable_work_id){
  notable_work_id=paste0("<",notable_work_id,">")
  result=spq_init() %>%
      spq_set(notable_work= notable_work_id) %>%
      spq_add("?notable_work wdt:P921 ?main_subject") %>%
      spq_label(main_subject,.languages="fr") %>%
      spq_select(-notable_work) %>%
      spq_perform()
  return(result)
}

get_main_subject("http://www.wikidata.org/entity/Q3203693")
```
```{r}
# Prend environ 1 minute
tib_main_subject=tib_geographes_enrichie %>%
   filter(!is.na(notable_work)) %>% 
   select(notable_work,notable_work_label,person_label) %>% 
   unique() %>% 
   mutate(data=purrr::map(notable_work,get_main_subject)) %>% 
   unnest(cols=data)
#saveRDS(tib_main_subject,"data/tib_main_subject.RDS")
```

```{r}
tib_geographes_enrichie=tib_geographes_enrichie %>% 
  left_join(tib_main_subject)
```



# ANNEXES

![](img/github_logo.png){width="25px"} Package installable et modifiable ici <https://github.com/lvaudor/glitter>.

📄 https://lvaudor.github.io/glitter/

https://github.com/lvaudor/sequins

![](img/hex-sequins_small.png)



